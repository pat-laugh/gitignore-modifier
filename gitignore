#!/usr/bin/env python3
# Copyright Patrick Laughrea
# Licensed under the Apache License, Version 2.0

import difflib, getopt, json, os, re, subprocess, sys
from datetime import datetime as dt

FILE_CONFIG = os.path.join(os.environ['HOME'], '.gitignore-modifier')

TAG_NAME_START = 'start'
TAG_NAME_END = 'end'

def get_gitignore_tag(tag, name):
	return '##gitignore-%s:%s' % (tag, name)

RE_NAME_TEMPLATE_STR = r'([!-.0-~]+(/|\\))*([!-.0-~]+)'
def get_re_gitignore(tag):
	return re.compile(r'^\s*#+\s*gitignore-%s:%s\s*$' % (tag, RE_NAME_TEMPLATE_STR))

RE_START = get_re_gitignore(TAG_NAME_START)
RE_END = get_re_gitignore(TAG_NAME_END)
RE_GITIGNORE_LINK = re.compile(r'^%s.gitignore$' % RE_NAME_TEMPLATE_STR)

class BackEnd:
	def __init__(self, exec='gibo'):
		self.exec = 'gibo'
		self.check_last_update()
	
	def dump(self, name):
		try:
			return subprocess.check_output(
					[self.exec, 'dump', name],
					stderr=subprocess.DEVNULL,
					universal_newlines=True).splitlines()
		except FileNotFoundError:
			raise Exception('exec "%s" possibly does not exist' % self.exec)
		except subprocess.CalledProcessError:
			items = {x.lower(): x for x in subprocess.check_output(
				[self.exec, 'list'],
				universal_newlines=True).splitlines()}
			possible_matches = difflib.get_close_matches(name.lower(), items, 10, 0.6)
			possible_matches = [items[x] for x in possible_matches]
			raise Exception('no template "%s" found; maybe you meant one of these? %s' % (name, ', '.join(possible_matches)))

	def check_last_update(self):
		try:
			data = json.load(open(FILE_CONFIG))
			self.last_update = dt.utcfromtimestamp(data['last_update'])
		except (FileNotFoundError, KeyError, TypeError, json.decoder.JSONDecodeError):
			self.last_update = None
		
	def _should_update(self):
		return self.last_update is None or (
				(dt.utcnow() - self.last_update).days >= 1)
	
	def update(self, force=False):
		if not force and not self._should_update():
			return
		try:
			subprocess.run([self.exec, 'update'],
					stdout=subprocess.DEVNULL,
					stderr=subprocess.DEVNULL,
					universal_newlines=True)
		except FileNotFoundError:
			raise Exception('exec "%s" possibly does not exist' % self.exec)
		try:
			data = json.load(open(FILE_CONFIG))
		except (FileNotFoundError, json.decoder.JSONDecodeError):
			data = {}
		self.last_update = dt.utcnow()
		data['last_update'] = self.last_update.timestamp()
		json.dump(data, open(FILE_CONFIG, 'w'))

gibo_back_end = BackEnd()

class Template:
	def __init__(self, name, content=None):
		self.name = name
		self.content = content

	def _get_content(self, name):
		lines = gibo_back_end.dump(name)
		all_lines = []
		for line in lines:
			# expand gitignore links
			m = RE_GITIGNORE_LINK.match(line)
			if m is None:
				all_lines.append(line)
			else:
				all_lines += self._get_content(m.group(3))
		return all_lines

	def update(self):
		gibo_back_end.update()
		self.content = self._get_content(self.name)

class Gitignore:
	def __init__(self, file_path='.gitignore'):
		self.file_path = file_path
		self.templates = {}
		self.content = []

	def _parse_gitignore(self, i, lines, name):
		gitignore_lines = []
		while i < len(lines):
			line = lines[i]
			i += 1
			m = RE_END.match(line)
			if m is None or m.group(3) != name:
				gitignore_lines.append(line)
			else:
				return i, gitignore_lines
		raise Exception('the start tag for "%s" is not matched by a corresponding end tag' % name)
	
	def read(self):
		try:
			with open(self.file_path) as f:
				lines = f.read().splitlines()
		except FileNotFoundError:
			return
		i = 0
		while i < len(lines):
			line = lines[i]
			i += 1
			m = RE_START.match(line)
			if m is None:
				self.content.append(line)
				continue
			name = m.group(3)
			i, gitignore_lines = self._parse_gitignore(i, lines, name)
			if name in self.templates:
				continue # ignore
			tmpl = Template(name, gitignore_lines)
			self.content.append(tmpl)
			self.templates[name] = tmpl
	
	def write(self):
		lines = []

		def _add_tmpl(tmpl, lines):
			lines.append(get_gitignore_tag(TAG_NAME_START, tmpl.name))
			lines += tmpl.content
			lines.append(get_gitignore_tag(TAG_NAME_END, tmpl.name))

		tmpls_to_add = set(self.templates)
		for line in self.content:
			if type(line) is not Template:
				lines.append(line)
				continue
			tmpl = line
			_add_tmpl(tmpl, lines)
			tmpls_to_add.remove(tmpl.name)
		for name in tmpls_to_add:
			tmpl = self.templates[name]
			_add_tmpl(tmpl, lines)
		with open(self.file_path, 'w') as f:
			f.write('\n'.join(lines))

	def clear(self):
		self.remove(self.templates)
	def remove(self, names):
		i = 0
		not_removed = set(names)
		while i < len(self.content):
			line = self.content[i]
			if type(line) is not Template or line.name not in names:
				i += 1
				continue
			del self.content[i]
			try:
				del self.templates[line.name]
				not_removed.remove(line.name)
			except KeyError:
				pass
		if len(not_removed) > 0:
			raise Exception('templates not in file: ' + ', '.join(not_removed))
	def update(self, names):
		gibo_back_end.update(True)
		for name in names:
			try:
				self.templates[name].update()
			except KeyError:
				raise Exception('template "%s" not in file' % name)
	def add(self, names):
		for name in names:
			if name in self.templates:
				self.templates[name].update()
				continue
			self._add(name)
	def _add(self, name):
		tmpl = Template(name)
		tmpl.update()
		self.templates[name] = tmpl

if __name__ == '__main__':
	APP_NAME = os.path.basename(sys.argv[0])
	USAGE = '''\
Usage: %s <command>

Commands:
    add [<name>...]    create .gitignore if needed, and add templates
    clear              remove all templates
    help               display this text
    list [-a]          list templates in .gitignore; -a to include other lines
    remove <name>...   remove templates
    update [<name>...] update all or specified templates to latest version\
''' % APP_NAME

	try:
		if len(sys.argv) <= 1:
			print(USAGE)
			sys.exit(2)
		arg, params = sys.argv[1], sys.argv[2:]
		if arg == 'help':
			print(USAGE)
			sys.exit()
		g = Gitignore()
		g.read()
		if arg == 'clear':
			g.clear()
		elif arg == 'list':
			if len(params) == 1 and params[0] == '-a':
				for line in g.content:
					if type(line) is Template:
						print('Template: ' + line.name)
					else:
						print(line)
			else:
				items = list(g.templates)
				for item in sorted(items):
					print(item)
			sys.exit()
		elif arg == 'remove':
			if len(params) == 0:
				raise getopt.GetoptError('no templates specified')
			g.remove(params)
		elif arg == 'add':
			g.add(params)
		elif arg == 'update':
			g.update(params)
		else:
			raise Exception('unkown argument "%s"' % arg)
		g.write()
	except getopt.GetoptError as e:
		print('%s: %s' % (APP_NAME, e),  file=sys.stderr)
		print(USAGE)
		sys.exit(2)
	except Exception as e:
		print('%s: %s' % (APP_NAME, e),  file=sys.stderr)
		sys.exit(1)
