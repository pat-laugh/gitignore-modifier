#!/usr/bin/env python3
# Copyright Patrick Laughrea
# Licensed under the Apache License, Version 2.0

import getopt, os, subprocess, sys

class Gitignore:
	def __init__(self, file_path='.gitignore'):
		self.file_path = file_path
		self.templates = set()
		self.content = []
	
	def read(self):
		try:
			with open(f.file_path) as f:
				
		self.read()
	def save(self):
		pass

if __name__ == '__main__':
	USAGE = '''\
Usage: %s <command>

Commands:
    add [<name>...]    create .gitignore if needed, and add templates
    clear              remove all templates
    help               display the usage text
    list               list templates in .gitignore
    remove <name>...   remove templates
    update [<name>...] update all or specified templates to latest version\
'''
	APP_NAME = os.path.basename(sys.argv[0])

	try:
		if len(sys.argv) <= 1:
			raise Exception('no argument provided')
		arg, params = sys.argv[1], sys.argv[2:]
		if arg == 'help':
			print(USAGE)
			sys.exit()
		g = Gitignore()
		g.read()
		if arg == 'add':
			g.add(params)
		elif arg == 'clear':
			g.clear()
		elif arg == 'list':
			items = list(g.templates())
			items.sort(key=lambda x: x.name)
			for item in items:
				print(item)
			sys.exit()
		elif arg == 'remove':
			g.remove(params)
		elif arg == 'update':
			g.update()
		else:
			raise Exception('unkown argument "%s"' % arg)
		g.save()
	except (Exception, getopt.GetoptError) as e:
		print('%s: %s' % (APP_NAME, e),  file=sys.stderr)
		sys.exit(USAGE)

def get_re_gitignore(tag):
	return re.compile(r'^\s*#+\s*gitignore-%s:([!-.0-~]+(/|\\))*([!-.0-~]+)\s*$' % tag)

re_start = get_re_gitignore('start')
def parse_file(filename):
	errors = []
	with open(filename, 'r') as f:
		for line in f:
			m = re_start.match(line)
			if m is None:
				junk_lines.append(line)
			else:
				name = m.group(3)
				parse_gitignore(f, name)
				if name.lower() not in names:
					errors.append(name)
	if len(errors) > 0:
		if len(errors) == 1:
			printerr('There was an error while parsing the %s file.' % name_gitignore)
			error_unknown_gitignore(errors[0])
		else:
			printerr('There were multiple errors while parsing the %s file.' % name_gitignore)
			for n in errors:
				error_unknown_gitignore(n)
		sys.exit(1)
	if len(junk_lines) > 0:
		last_line = junk_lines[-1]
		if last_line[-1] != '\n':
			junk_lines[-1] = last_line + os.linesep

re_end = get_re_gitignore('end')
def parse_gitignore(f, name):
	gitignore_lines = []
	for line in f:
		m = re_end.match(line)
		if m is None or m.group(3) != name:
			gitignore_lines.append(line)
		else:
			gitignores.update({name.lower(): gitignore_lines})
			return
	printerr('There was an error while parsing the %s file.' % name_gitignore)
	sys.exit('Error: the start tag for "%s" is not matched by a corresponding end tag.' % name)

def get_gitignore_tag(tag, name):
	return '##gitignore-%s:%s\n' % (tag, name)

def write_file(filename):
	f = open(filename, 'w')
	f.writelines(junk_lines)
	for name, lines in gitignores.items():
		f.write(get_gitignore_tag('start', name))
		f.writelines(lines)
		f.write(get_gitignore_tag('end', name))
	f.close()
